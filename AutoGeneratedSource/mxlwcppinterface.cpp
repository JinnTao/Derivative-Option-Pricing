//// 
//// Autogenerated by xlw 
//// Do not edit this file, it will be overwritten 
//// by InterfaceGenerator 
////

#include "xlw/MyContainers.h"
#include <xlw/CellMatrix.h>
#include <stdexcept>
#include "cppinterface.h"
#include <xlw/xlwManaged.h>
using namespace System;
using namespace Runtime::InteropServices;





double mxlw_TD_blackScholesMertonPrice
		(
		std::string optionType,
		std::string valueType,
		double K,
		double rate,
		double b,
		double S,
		double volatility,
		double tau
		)
		{
		MANAGED_EXECL_BEGIN
			return TD_blackScholesMertonPrice(optionType,valueType,K,rate,b,S,volatility,tau );
		MANAGED_EXECL_END
		}

////////////////////////////////////

double mxlw_TD_americanBjsPrice
		(
		std::string optionType,
		std::string valueType,
		double K,
		double rate,
		double b,
		double S,
		double volatility,
		double tau
		)
		{
		MANAGED_EXECL_BEGIN
			return TD_americanBjsPrice(optionType,valueType,K,rate,b,S,volatility,tau );
		MANAGED_EXECL_END
		}

////////////////////////////////////

double mxlw_TD_americanBTreePrice
		(
		std::string optionType,
		std::string valueType,
		double K,
		double rate,
		double b,
		double S,
		double volatility,
		double tau
		)
		{
		MANAGED_EXECL_BEGIN
			return TD_americanBTreePrice(optionType,valueType,K,rate,b,S,volatility,tau );
		MANAGED_EXECL_END
		}

////////////////////////////////////

double mxlw_TD_asianPrice
		(
		std::string optionType,
		std::string valueType,
		double K,
		double rate,
		double b,
		double S,
		double volatility,
		double tau,
		double SA,
		double toNextAPoint,
		double totalAPoint,
		double averagingPoint
		)
		{
		MANAGED_EXECL_BEGIN
			return TD_asianPrice(optionType,valueType,K,rate,b,S,volatility,tau,SA,toNextAPoint,totalAPoint,averagingPoint );
		MANAGED_EXECL_END
		}

////////////////////////////////////

double mxlw_TD_barrierPrice
		(
		std::string optionType,
		std::string valueType,
		double K,
		double rate,
		double b,
		double S,
		double volatility,
		double tau,
		double barrier,
		double rebate,
		std::string payoutStyle
		)
		{
		MANAGED_EXECL_BEGIN
			return TD_barrierPrice(optionType,valueType,K,rate,b,S,volatility,tau,barrier,rebate,payoutStyle );
		MANAGED_EXECL_END
		}

////////////////////////////////////

double mxlw_TD_cashOrNothing
		(
		std::string optionType,
		std::string valueType,
		double K,
		double rate,
		double b,
		double S,
		double volatility,
		double tau,
		double payAmountK
		)
		{
		MANAGED_EXECL_BEGIN
			return TD_cashOrNothing(optionType,valueType,K,rate,b,S,volatility,tau,payAmountK );
		MANAGED_EXECL_END
		}

////////////////////////////////////

double mxlw_TD_assetOrNothing
		(
		std::string optionType,
		std::string valueType,
		double K,
		double rate,
		double b,
		double S,
		double volatility,
		double tau
		)
		{
		MANAGED_EXECL_BEGIN
			return TD_assetOrNothing(optionType,valueType,K,rate,b,S,volatility,tau );
		MANAGED_EXECL_END
		}

////////////////////////////////////

double mxlw_TD_americanOneTouch
		(
		std::string optionType,
		std::string valueType,
		double K,
		double rate,
		double b,
		double S,
		double volatility,
		double tau,
		std::string payoutStyle
		)
		{
		MANAGED_EXECL_BEGIN
			return TD_americanOneTouch(optionType,valueType,K,rate,b,S,volatility,tau,payoutStyle );
		MANAGED_EXECL_END
		}

////////////////////////////////////

double mxlw_TD_ewma_vol
		(
		MyMatrix logReturn_oldToNew,
		double lamuda
		)
		{
		MANAGED_EXECL_BEGIN
			return TD_ewma_vol(logReturn_oldToNew,lamuda );
		MANAGED_EXECL_END
		}

////////////////////////////////////

double mxlw_TD_tradingDay
		(
		int startDate,
		int endDate
		)
		{
		MANAGED_EXECL_BEGIN
			return TD_tradingDay(startDate,endDate );
		MANAGED_EXECL_END
		}

////////////////////////////////////

double mxlw_TD_spreadEuropean
		(
		std::string optionType,
		std::string valueType,
		double S1,
		double S2,
		double Q1,
		double Q2,
		double K,
		double tau,
		double b1,
		double b2,
		double r,
		double v1,
		double v2,
		double corr
		)
		{
		MANAGED_EXECL_BEGIN
			return TD_spreadEuropean(optionType,valueType,S1,S2,Q1,Q2,K,tau,b1,b2,r,v1,v2,corr );
		MANAGED_EXECL_END
		}

////////////////////////////////////

double mxlw_TD_asianBarrierModel
		(
		std::string optionType,
		std::string valueType,
		double S0,
		double K,
		double A,
		double r,
		double b,
		double T,
		double t1,
		int totalPoint,
		int averagingPoint,
		double barrier,
		double sigma,
		double compensation,
		double initPrice,
		int Nrep,
		int yearBase
		)
		{
		MANAGED_EXECL_BEGIN
			return TD_asianBarrierModel(optionType,valueType,S0,K,A,r,b,T,t1,totalPoint,averagingPoint,barrier,sigma,compensation,initPrice,Nrep,yearBase );
		MANAGED_EXECL_END
		}

////////////////////////////////////

double mxlw_TD_version
		(
		int i
		)
		{
		MANAGED_EXECL_BEGIN
			return TD_version(i );
		MANAGED_EXECL_END
		}

////////////////////////////////////

