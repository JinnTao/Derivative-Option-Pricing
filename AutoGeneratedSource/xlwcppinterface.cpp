//// 
//// Autogenerated by xlw 
//// Do not edit this file, it will be overwritten 
//// by InterfaceGenerator 
////

#include "xlw/MyContainers.h"
#include <xlw/CellMatrix.h>
#include "mxlwcppinterface.h"
#include <xlw/xlw.h>
#include <xlw/XlFunctionRegistration.h>
#include <stdexcept>
#include <xlw/XlOpenClose.h>
#include <xlw/HiResTimer.h>
using namespace xlw;

namespace {
const char* LibraryName = "MyManagedTestLibrary";
};


// registrations start here


namespace
{
XLRegistration::Arg
mxlw_TD_blackScholesMertonPriceArgs[]=
{
{ "optionType","too lazy to comment this one ","XLF_OPER"},
{ "valueType","too lazy to comment this one ","XLF_OPER"},
{ "K","too lazy to comment this one ","B"},
{ "rate","too lazy to comment this one ","B"},
{ "b","too lazy to comment this one ","B"},
{ "S","too lazy to comment this one ","B"},
{ "volatility","too lazy to comment this one ","B"},
{ "tau","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_TD_blackScholesMertonPrice("xlmxlw_TD_blackScholesMertonPrice",
"TD_blackScholesMertonPrice",
"too lazy to comment this function ",
LibraryName,
mxlw_TD_blackScholesMertonPriceArgs,
8
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_TD_blackScholesMertonPrice(
LPXLFOPER optionTypea,
LPXLFOPER valueTypea,
double K,
double rate,
double b,
double S,
double volatility,
double tau)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper optionTypeb(
	(optionTypea));
std::string optionType(
	optionTypeb.AsString("optionType"));

XlfOper valueTypeb(
	(valueTypea));
std::string valueType(
	valueTypeb.AsString("valueType"));







double result(
	mxlw_TD_blackScholesMertonPrice(
		optionType,
		valueType,
		K,
		rate,
		b,
		S,
		volatility,
		tau)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_TD_americanBjsPriceArgs[]=
{
{ "optionType","too lazy to comment this one ","XLF_OPER"},
{ "valueType","too lazy to comment this one ","XLF_OPER"},
{ "K","too lazy to comment this one ","B"},
{ "rate","too lazy to comment this one ","B"},
{ "b","too lazy to comment this one ","B"},
{ "S","too lazy to comment this one ","B"},
{ "volatility","too lazy to comment this one ","B"},
{ "tau","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_TD_americanBjsPrice("xlmxlw_TD_americanBjsPrice",
"TD_americanBjsPrice",
"too lazy to comment this function ",
LibraryName,
mxlw_TD_americanBjsPriceArgs,
8
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_TD_americanBjsPrice(
LPXLFOPER optionTypea,
LPXLFOPER valueTypea,
double K,
double rate,
double b,
double S,
double volatility,
double tau)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper optionTypeb(
	(optionTypea));
std::string optionType(
	optionTypeb.AsString("optionType"));

XlfOper valueTypeb(
	(valueTypea));
std::string valueType(
	valueTypeb.AsString("valueType"));







double result(
	mxlw_TD_americanBjsPrice(
		optionType,
		valueType,
		K,
		rate,
		b,
		S,
		volatility,
		tau)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_TD_americanBTreePriceArgs[]=
{
{ "optionType","too lazy to comment this one ","XLF_OPER"},
{ "valueType","too lazy to comment this one ","XLF_OPER"},
{ "K","too lazy to comment this one ","B"},
{ "rate","too lazy to comment this one ","B"},
{ "b","too lazy to comment this one ","B"},
{ "S","too lazy to comment this one ","B"},
{ "volatility","too lazy to comment this one ","B"},
{ "tau","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_TD_americanBTreePrice("xlmxlw_TD_americanBTreePrice",
"TD_americanBTreePrice",
"too lazy to comment this function ",
LibraryName,
mxlw_TD_americanBTreePriceArgs,
8
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_TD_americanBTreePrice(
LPXLFOPER optionTypea,
LPXLFOPER valueTypea,
double K,
double rate,
double b,
double S,
double volatility,
double tau)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper optionTypeb(
	(optionTypea));
std::string optionType(
	optionTypeb.AsString("optionType"));

XlfOper valueTypeb(
	(valueTypea));
std::string valueType(
	valueTypeb.AsString("valueType"));







double result(
	mxlw_TD_americanBTreePrice(
		optionType,
		valueType,
		K,
		rate,
		b,
		S,
		volatility,
		tau)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_TD_asianPriceArgs[]=
{
{ "optionType","too lazy to comment this one ","XLF_OPER"},
{ "valueType","too lazy to comment this one ","XLF_OPER"},
{ "K","too lazy to comment this one ","B"},
{ "rate","too lazy to comment this one ","B"},
{ "b","too lazy to comment this one ","B"},
{ "S","too lazy to comment this one ","B"},
{ "volatility","too lazy to comment this one ","B"},
{ "tau","too lazy to comment this one ","B"},
{ "SA","too lazy to comment this one ","B"},
{ "toNextAPoint","too lazy to comment this one ","B"},
{ "totalAPoint","too lazy to comment this one ","B"},
{ "averagingPoint","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_TD_asianPrice("xlmxlw_TD_asianPrice",
"TD_asianPrice",
"too lazy to comment this function ",
LibraryName,
mxlw_TD_asianPriceArgs,
12
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_TD_asianPrice(
LPXLFOPER optionTypea,
LPXLFOPER valueTypea,
double K,
double rate,
double b,
double S,
double volatility,
double tau,
double SA,
double toNextAPoint,
double totalAPoint,
double averagingPoint)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper optionTypeb(
	(optionTypea));
std::string optionType(
	optionTypeb.AsString("optionType"));

XlfOper valueTypeb(
	(valueTypea));
std::string valueType(
	valueTypeb.AsString("valueType"));











double result(
	mxlw_TD_asianPrice(
		optionType,
		valueType,
		K,
		rate,
		b,
		S,
		volatility,
		tau,
		SA,
		toNextAPoint,
		totalAPoint,
		averagingPoint)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_TD_barrierPriceArgs[]=
{
{ "optionType","too lazy to comment this one ","XLF_OPER"},
{ "valueType","too lazy to comment this one ","XLF_OPER"},
{ "K","too lazy to comment this one ","B"},
{ "rate","too lazy to comment this one ","B"},
{ "b","too lazy to comment this one ","B"},
{ "S","too lazy to comment this one ","B"},
{ "volatility","too lazy to comment this one ","B"},
{ "tau","too lazy to comment this one ","B"},
{ "barrier","too lazy to comment this one ","B"},
{ "rebate","too lazy to comment this one ","B"},
{ "payoutStyle","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_TD_barrierPrice("xlmxlw_TD_barrierPrice",
"TD_barrierPrice",
"too lazy to comment this function ",
LibraryName,
mxlw_TD_barrierPriceArgs,
11
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_TD_barrierPrice(
LPXLFOPER optionTypea,
LPXLFOPER valueTypea,
double K,
double rate,
double b,
double S,
double volatility,
double tau,
double barrier,
double rebate,
LPXLFOPER payoutStylea)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper optionTypeb(
	(optionTypea));
std::string optionType(
	optionTypeb.AsString("optionType"));

XlfOper valueTypeb(
	(valueTypea));
std::string valueType(
	valueTypeb.AsString("valueType"));









XlfOper payoutStyleb(
	(payoutStylea));
std::string payoutStyle(
	payoutStyleb.AsString("payoutStyle"));

double result(
	mxlw_TD_barrierPrice(
		optionType,
		valueType,
		K,
		rate,
		b,
		S,
		volatility,
		tau,
		barrier,
		rebate,
		payoutStyle)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_TD_cashOrNothingArgs[]=
{
{ "optionType","too lazy to comment this one ","XLF_OPER"},
{ "valueType","too lazy to comment this one ","XLF_OPER"},
{ "K","too lazy to comment this one ","B"},
{ "rate","too lazy to comment this one ","B"},
{ "b","too lazy to comment this one ","B"},
{ "S","too lazy to comment this one ","B"},
{ "volatility","too lazy to comment this one ","B"},
{ "tau","too lazy to comment this one ","B"},
{ "payAmountK","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_TD_cashOrNothing("xlmxlw_TD_cashOrNothing",
"TD_cashOrNothing",
"too lazy to comment this function ",
LibraryName,
mxlw_TD_cashOrNothingArgs,
9
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_TD_cashOrNothing(
LPXLFOPER optionTypea,
LPXLFOPER valueTypea,
double K,
double rate,
double b,
double S,
double volatility,
double tau,
double payAmountK)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper optionTypeb(
	(optionTypea));
std::string optionType(
	optionTypeb.AsString("optionType"));

XlfOper valueTypeb(
	(valueTypea));
std::string valueType(
	valueTypeb.AsString("valueType"));








double result(
	mxlw_TD_cashOrNothing(
		optionType,
		valueType,
		K,
		rate,
		b,
		S,
		volatility,
		tau,
		payAmountK)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_TD_assetOrNothingArgs[]=
{
{ "optionType","too lazy to comment this one ","XLF_OPER"},
{ "valueType","too lazy to comment this one ","XLF_OPER"},
{ "K","too lazy to comment this one ","B"},
{ "rate","too lazy to comment this one ","B"},
{ "b","too lazy to comment this one ","B"},
{ "S","too lazy to comment this one ","B"},
{ "volatility","too lazy to comment this one ","B"},
{ "tau","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_TD_assetOrNothing("xlmxlw_TD_assetOrNothing",
"TD_assetOrNothing",
"too lazy to comment this function ",
LibraryName,
mxlw_TD_assetOrNothingArgs,
8
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_TD_assetOrNothing(
LPXLFOPER optionTypea,
LPXLFOPER valueTypea,
double K,
double rate,
double b,
double S,
double volatility,
double tau)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper optionTypeb(
	(optionTypea));
std::string optionType(
	optionTypeb.AsString("optionType"));

XlfOper valueTypeb(
	(valueTypea));
std::string valueType(
	valueTypeb.AsString("valueType"));







double result(
	mxlw_TD_assetOrNothing(
		optionType,
		valueType,
		K,
		rate,
		b,
		S,
		volatility,
		tau)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_TD_americanOneTouchArgs[]=
{
{ "optionType","too lazy to comment this one ","XLF_OPER"},
{ "valueType","too lazy to comment this one ","XLF_OPER"},
{ "K","too lazy to comment this one ","B"},
{ "rate","too lazy to comment this one ","B"},
{ "b","too lazy to comment this one ","B"},
{ "S","too lazy to comment this one ","B"},
{ "volatility","too lazy to comment this one ","B"},
{ "tau","too lazy to comment this one ","B"},
{ "payoutStyle","too lazy to comment this one ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_TD_americanOneTouch("xlmxlw_TD_americanOneTouch",
"TD_americanOneTouch",
"too lazy to comment this function ",
LibraryName,
mxlw_TD_americanOneTouchArgs,
9
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_TD_americanOneTouch(
LPXLFOPER optionTypea,
LPXLFOPER valueTypea,
double K,
double rate,
double b,
double S,
double volatility,
double tau,
LPXLFOPER payoutStylea)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper optionTypeb(
	(optionTypea));
std::string optionType(
	optionTypeb.AsString("optionType"));

XlfOper valueTypeb(
	(valueTypea));
std::string valueType(
	valueTypeb.AsString("valueType"));







XlfOper payoutStyleb(
	(payoutStylea));
std::string payoutStyle(
	payoutStyleb.AsString("payoutStyle"));

double result(
	mxlw_TD_americanOneTouch(
		optionType,
		valueType,
		K,
		rate,
		b,
		S,
		volatility,
		tau,
		payoutStyle)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_TD_ewma_volArgs[]=
{
{ "logReturn_oldToNew","too lazy to comment this one ","XLF_OPER"},
{ "lamuda","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_TD_ewma_vol("xlmxlw_TD_ewma_vol",
"TD_ewma_vol",
"too lazy to comment this function ",
LibraryName,
mxlw_TD_ewma_volArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_TD_ewma_vol(
LPXLFOPER logReturn_oldToNewa,
double lamuda)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper logReturn_oldToNewb(
	(logReturn_oldToNewa));
MyMatrix logReturn_oldToNew(
	logReturn_oldToNewb.AsMatrix("logReturn_oldToNew"));


double result(
	mxlw_TD_ewma_vol(
		logReturn_oldToNew,
		lamuda)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_TD_tradingDayArgs[]=
{
{ "startDate","too lazy to comment this one ","B"},
{ "endDate","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_TD_tradingDay("xlmxlw_TD_tradingDay",
"TD_tradingDay",
"too lazy to comment this function ",
LibraryName,
mxlw_TD_tradingDayArgs,
2
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_TD_tradingDay(
double startDatea,
double endDatea)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

int startDate(
	static_cast<int>(startDatea));

int endDate(
	static_cast<int>(endDatea));

double result(
	mxlw_TD_tradingDay(
		startDate,
		endDate)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_TD_spreadEuropeanArgs[]=
{
{ "optionType","too lazy to comment this one ","XLF_OPER"},
{ "valueType","too lazy to comment this one ","XLF_OPER"},
{ "S1","too lazy to comment this one ","B"},
{ "S2","too lazy to comment this one ","B"},
{ "Q1","too lazy to comment this one ","B"},
{ "Q2","too lazy to comment this one ","B"},
{ "K","too lazy to comment this one ","B"},
{ "tau","too lazy to comment this one ","B"},
{ "b1","too lazy to comment this one ","B"},
{ "b2","too lazy to comment this one ","B"},
{ "r","too lazy to comment this one ","B"},
{ "v1","too lazy to comment this one ","B"},
{ "v2","too lazy to comment this one ","B"},
{ "corr","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_TD_spreadEuropean("xlmxlw_TD_spreadEuropean",
"TD_spreadEuropean",
"too lazy to comment this function ",
LibraryName,
mxlw_TD_spreadEuropeanArgs,
14
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_TD_spreadEuropean(
LPXLFOPER optionTypea,
LPXLFOPER valueTypea,
double S1,
double S2,
double Q1,
double Q2,
double K,
double tau,
double b1,
double b2,
double r,
double v1,
double v2,
double corr)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper optionTypeb(
	(optionTypea));
std::string optionType(
	optionTypeb.AsString("optionType"));

XlfOper valueTypeb(
	(valueTypea));
std::string valueType(
	valueTypeb.AsString("valueType"));













double result(
	mxlw_TD_spreadEuropean(
		optionType,
		valueType,
		S1,
		S2,
		Q1,
		Q2,
		K,
		tau,
		b1,
		b2,
		r,
		v1,
		v2,
		corr)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_TD_asianBarrierModelArgs[]=
{
{ "optionType","too lazy to comment this one ","XLF_OPER"},
{ "valueType","too lazy to comment this one ","XLF_OPER"},
{ "S0","too lazy to comment this one ","B"},
{ "K","too lazy to comment this one ","B"},
{ "A","too lazy to comment this one ","B"},
{ "r","too lazy to comment this one ","B"},
{ "b","too lazy to comment this one ","B"},
{ "T","too lazy to comment this one ","B"},
{ "t1","too lazy to comment this one ","B"},
{ "totalPoint","too lazy to comment this one ","B"},
{ "averagingPoint","too lazy to comment this one ","B"},
{ "barrier","too lazy to comment this one ","B"},
{ "sigma","too lazy to comment this one ","B"},
{ "compensation","too lazy to comment this one ","B"},
{ "initPrice","too lazy to comment this one ","B"},
{ "Nrep","too lazy to comment this one ","B"},
{ "yearBase","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_TD_asianBarrierModel("xlmxlw_TD_asianBarrierModel",
"TD_asianBarrierModel",
"too lazy to comment this function ",
LibraryName,
mxlw_TD_asianBarrierModelArgs,
17
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_TD_asianBarrierModel(
LPXLFOPER optionTypea,
LPXLFOPER valueTypea,
double S0,
double K,
double A,
double r,
double b,
double T,
double t1,
double totalPointa,
double averagingPointa,
double barrier,
double sigma,
double compensation,
double initPrice,
double Nrepa,
double yearBasea)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

XlfOper optionTypeb(
	(optionTypea));
std::string optionType(
	optionTypeb.AsString("optionType"));

XlfOper valueTypeb(
	(valueTypea));
std::string valueType(
	valueTypeb.AsString("valueType"));








int totalPoint(
	static_cast<int>(totalPointa));

int averagingPoint(
	static_cast<int>(averagingPointa));





int Nrep(
	static_cast<int>(Nrepa));

int yearBase(
	static_cast<int>(yearBasea));

double result(
	mxlw_TD_asianBarrierModel(
		optionType,
		valueType,
		S0,
		K,
		A,
		r,
		b,
		T,
		t1,
		totalPoint,
		averagingPoint,
		barrier,
		sigma,
		compensation,
		initPrice,
		Nrep,
		yearBase)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

namespace
{
XLRegistration::Arg
mxlw_TD_versionArgs[]=
{
{ "i","too lazy to comment this one ","B"}
};
  XLRegistration::XLFunctionRegistrationHelper
registermxlw_TD_version("xlmxlw_TD_version",
"TD_version",
"too lazy to comment this function ",
LibraryName,
mxlw_TD_versionArgs,
1
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlmxlw_TD_version(
double ia)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);

int i(
	static_cast<int>(ia));

double result(
	mxlw_TD_version(
		i)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoOpen
//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoClose
//////////////////////////

